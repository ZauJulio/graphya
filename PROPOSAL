////////////////////  Definition  ////////////////////
node(person);
node(family);

// Definição de arestas (relacionamentos)
// Na árvore genealógica representada, os nós do tipo "person" e "family" são definidos.
// A relação "parent" é utilizada para expressar as conexões de parentalidade, onde, por exemplo,
// "john" é pai de "alice", "alice" é mãe de "bob", e "bob" é pai de "charlie". A relação "family"
// é utilizada para expressar a conexão entre um nó do tipo "family" e um nó do tipo "person".
edge(parent, john, alice, family, 1);
edge(parent, john, jeff, family, 2);
edge(parent, alice, bob, family, 3);
edge(parent, bob, charlie, family, 4);

////////////////////  Attributes  ////////////////////
attribute(name, string, "John");
attribute(name, string, "Alice");
attribute(name, string, "Bob");
attribute(name, string, "Charlie");

////////////////////  Rule  ////////////////////
// Regra: Um nó X é avô de um nó Z, se X é pai de Y e Y é pai de Z.
edge(grandparent, X, Z) :- edge(parent, X, Y), edge(parent, Y, Z).

////////////////////  Rule  ////////////////////
// Regra: A regra oldest_ancestor(X) consulta o nó ancestral mais antigo na árvore genealógica.
// Para encontrar o ancestral mais antigo, utiliza a regra auxiliar find_oldest_ancestor(X), que
// busca avós recursivamente até encontrar um nó avô, representado pela relação edge(grandparent, X, _).
// A consulta ?- oldest_ancestor(X). retorna o nó ancestral mais antigo na árvore genealógica.
// Regra: Consultar o nó ancestral mais antigo
oldest_ancestor(X) :- find_oldest_ancestor(X);

// Regra auxiliar para encontrar o nó ancestral mais antigo usando recursão
find_oldest_ancestor(X) :- edge(grandparent, X, _);
find_oldest_ancestor(X) :- edge(grandparent, Y, _), find_oldest_ancestor(Y);

////////////////////  Call  ////////////////////
// Chamada: Avalia a consulta baseada na condição, query(Consulta) :- Condição;
query(most_distant_ancestor(X)) :- oldest_ancestor(X, _);

// Exemplo: Para encontrar o parente mais distante de John, in code:
?- query(most_distant_ancestor(X));

// Consulta para encontrar o antepassado mais distante e atribuir os resultados à res.
?- findAll(X, query(most_distant_ancestor(X)), res);

// Consulta para encontrar o primeiro antepassado mais distante e atribuir o resultado à res
?- once(query(most_distant_ancestor(X)), res);

////////////////////  Rule  ////////////////////
// O predicado findAPath(X, Y, W, Path, Visited) é utilizado para encontrar caminhos ponderados
// em um grafo. A primeira regra estabelece um caminho direto entre X e Y com peso W se há uma
// aresta entre eles. A segunda regra é utilizada quando o caminho não é direto, realizando uma
// busca recursiva para encontrar um caminho evitando ciclos, calculando o peso total do caminho.
findAPath(X, Y, W, [X,Y], _) :- edge(X, Y, W);
findAPath(X, Y, W, [X|P], V) :-
  \+ member(X, V),
  edge(X, Z, W1),
  findAPath(Z, Y, W2, P, [X|V]),
  W is W1 + W2;

////////////////////  Call  ////////////////////
// Exemplo para encontrar o caminho entre dois nós e atribuir o resultado à res.
node(city);
node(distance);

// Definição de arestas (relacionamentos)
edge(connects, city_a, city_b, 10);
edge(connects, city_b, city_c, 15);
edge(connects, city_a, city_d, 5);
edge(connects, city_d, city_e, 8);
edge(connects, city_b, city_f, 12);
edge(connects, city_f, city_g, 20);

// Exemplo de consulta para encontrar um caminho entre city_a e city_g com o menor peso
query(gps(city_a, city_g, Weight, Path, [])) :- findAPath(city_a, city_g, Weight, _, []);

?- findapath(city_a, city_g, Weight, Path, []);

////////////////////  Script  ////////////////////
\`\md
sh$ zy main.zy -i path.graphml -q gps(caico, natal, _, _, _)
\`\
